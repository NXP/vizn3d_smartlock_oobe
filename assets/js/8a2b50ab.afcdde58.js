"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[724],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),v=p(n),m=r,u=v["".concat(l,".").concat(m)]||v[m]||c[m]||i;return n?a.createElement(u,s(s({ref:t},d),{},{components:n})):a.createElement(u,s({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=v;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:r,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}v.displayName="MDXCreateElement"},9191:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return d},default:function(){return v}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],o={sidebar_position:2},l="Event Handlers",p={unversionedId:"framework/events/event_handlers",id:"framework/events/event_handlers",isDocsHomePage:!1,title:"Event Handlers",description:"Because events are the primary means by which the framework communicates between devices,",source:"@site/docs/framework/events/event_handlers.md",sourceDirName:"framework/events",slug:"/framework/events/event_handlers",permalink:"/vizn3d_smartlock_oobe/docs/framework/events/event_handlers",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/vizn3d_smartlock_oobe/docs/framework/events/overview"},next:{title:"Naming Conventions",permalink:"/vizn3d_smartlock_oobe/docs/framework/naming_conventions"}},d=[{value:"Default Handlers",id:"default-handlers",children:[],level:2},{value:"App-specific Handlers",id:"app-specific-handlers",children:[],level:2}],c={toc:d};function v(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"event-handlers"},"Event Handlers"),(0,i.kt)("p",null,"Because events are the primary means by which the framework communicates between devices,\na mechanism to respond to those events is necessary for them to be useful.\nEvent handlers were created for this explicit purpose."),(0,i.kt)("p",null,"There are two kinds of event handler:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#default-handlers"},"Default Handlers")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#app-specific-handlers"},"App-specific Handlers"))),(0,i.kt)("p",null,"Event handlers,\nlike other device operators,\nare passed via the device's operator struct to its manager."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"const static display_dev_operator_t s_DisplayDev_LcdifOps = {\n    .init        = HAL_DisplayDev_LcdifRk024hh2_Init,\n    .deinit      = HAL_DisplayDev_LcdifRk024hh2_Uninit,\n    .start       = HAL_DisplayDev_LcdifRk024hh2_Start,\n    .blit        = HAL_DisplayDev_LcdifRk024hh2_Blit,\n    .inputNotify = HAL_DisplayDev_LcdifRk024hh2_InputNotify,\n};\n")),(0,i.kt)("p",null,"Each HAL device may define its own handlers for any given event.\nFor example,\na developer may want the RGB LEDs to turn green when a face is recognized,\nbut have the UI display a specific overlay for that same event.\nTo do this,\nthe RGB Output HAL device and the UI Output HAL device can each implement an ",(0,i.kt)("inlineCode",{parentName:"p"},"InferComplete"),' handler which will be called by their manager\nwhen an "InferComplete" event is received.'),(0,i.kt)("div",{className:"admonition admonition-important alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"important")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"A HAL device does NOT have to implement an event handler for any specific event,\nnor does it have to implement an ",(0,i.kt)("inlineCode",{parentName:"p"},"InputNotify")," handler (applicable for most device types)\nor an ",(0,i.kt)("inlineCode",{parentName:"p"},"InferComplete")," handler (applicable only for output devices)."))),(0,i.kt)("h2",{id:"default-handlers"},"Default Handlers"),(0,i.kt)("p",null,"Default event handlers are exactly what their name would suggest -- the default means by which a device handles events.\nA HAL device's default event handlers (",(0,i.kt)("inlineCode",{parentName:"p"},"InputNotify"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"InferComplete"),", etc.) can be found in the HAL device driver itself."),(0,i.kt)("p",null,"Nearly every device has a default handler implemented",(0,i.kt)("sup",{parentName:"p",id:"fnref-1"},(0,i.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1")),",\nalthough most devices will only actually handle a few types of events."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},(0,i.kt)("sup",{parentName:"p",id:"fnref-1"},(0,i.kt)("a",{parentName:"sup",href:"#fn-1",className:"footnote-ref"},"1"))," Devices which do not have a handler implemented can be extended to have one by using a similar device as an example."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="Example default handler"',title:'"Example',default:!0,'handler"':!0},'static hal_display_status_t HAL_DisplayDev_LcdifRk024hh2_InputNotify(const display_dev_t *receiver, void *data)\n{\n    hal_display_status_t error           = kStatus_HAL_DisplaySuccess;\n    event_base_t eventBase               = *(event_base_t *)data;\n    event_status_t event_response_status = kEventStatus_Ok;\n\n    if (eventBase.eventId == kEventID_SetDisplayOutputSource)\n    {\n        event_common_t event             = *(event_common_t *)data;\n        s_DisplayDev_Lcdif.cap.srcFormat = event.displayOutput.displayOutputSource;\n        s_NewBufferSet                   = true;\n        if (eventBase.respond != NULL)\n        {\n            eventBase.respond(eventBase.eventId, &event.displayOutput, event_response_status, true);\n        }\n        LOGI("[display_dev_inputNotify]: kEventID_SetDisplayOutputSource devID %d, srcFormat %d", receiver->id,\n             event.displayOutput.displayOutputSource);\n    }\n    else if (eventBase.eventId == kEventID_GetDisplayOutputSource)\n    {\n        display_output_event_t display;\n        display.displayOutputSource = s_DisplayDev_Lcdif.cap.srcFormat;\n        if (eventBase.respond != NULL)\n        {\n            eventBase.respond(eventBase.eventId, &display, event_response_status, true);\n        }\n        LOGI("[display_dev_inputNotify]: kEventID_GetDisplayOutputSource devID %d, srcFormat %d", receiver->id,\n             display.displayOutputSource);\n    }\n\n    return error;\n}\n')),(0,i.kt)("p",null,"Some devices will not handle any events at all\nand will instead return ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," after performing no action."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="HAL/common/hal_camera_csi_gc0308.c"',title:'"HAL/common/hal_camera_csi_gc0308.c"'},"hal_camera_status_t HAL_CameraDev_CsiGc0308_InputNotify(const camera_dev_t *dev, void *data)\n{\n    hal_camera_status_t ret = kStatus_HAL_CameraSuccess;\n\n    return ret;\n}\n")),(0,i.kt)("p",null,"Alternatively,\nsome devices which do not require an event handler\nmay simply return a ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL")," pointer instead."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="HAL/common/hal_display_lcdifv2_rk055ahd091.c"',title:'"HAL/common/hal_display_lcdifv2_rk055ahd091.c"'},"const static display_dev_operator_t s_DisplayDev_LcdifOps = {\n    .init        = HAL_DisplayDev_Lcdifv2Rk055ah_Init,\n    .deinit      = HAL_DisplayDev_Lcdifv2Rk055ah_Deinit,\n    .start       = HAL_DisplayDev_Lcdifv2Rk055ah_Start,\n    .blit        = HAL_DisplayDev_Lcdifv2Rk055ah_Blit,\n    .inputNotify = NULL,\n};\n")),(0,i.kt)("p",null,"Managers will know not to call the ",(0,i.kt)("inlineCode",{parentName:"p"},"InputNotify")," or other handler if that handler points to ",(0,i.kt)("inlineCode",{parentName:"p"},"NULL"),"."),(0,i.kt)("p",null,"A device's default handler whether for ",(0,i.kt)("inlineCode",{parentName:"p"},"InputNotify")," events or ",(0,i.kt)("inlineCode",{parentName:"p"},"InferComplete")," or otherwise can be overridden by an ",(0,i.kt)("a",{parentName:"p",href:"#app-specific-handlers"},'"app-specific"')," handler."),(0,i.kt)("h2",{id:"app-specific-handlers"},"App-specific Handlers"),(0,i.kt)("p",null,'App-specific handlers are device handlers which are defined for a specific "app"\nsuch as the Smart Lock project or the upcoming Touchless HMI project.'),(0,i.kt)("p",null,"Not every device will need to implement an app-specific handler,\nbut because default handlers are implemented using ",(0,i.kt)("inlineCode",{parentName:"p"},"WEAK")," functions",(0,i.kt)("sup",{parentName:"p",id:"fnref-2"},(0,i.kt)("a",{parentName:"sup",href:"#fn-2",className:"footnote-ref"},"2")),", any device which has a default event handler can have that handler overridden."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Some devices may not have implemented their default handlers using ",(0,i.kt)("inlineCode",{parentName:"p"},"WEAK")," functions,\nbut may be updated to do so in the future."))),(0,i.kt)("p",null,"For example,\nthe IR + White LEDs may not require project-specific handlers\nbecause they will always react the same way to a ",(0,i.kt)("inlineCode",{parentName:"p"},"kEventID_SetConfig"),"/",(0,i.kt)("inlineCode",{parentName:"p"},"kEventID_GetConfig"),' command.\nAlternatively, an application may wish to override and/or extend that default event handling behavior so that,\nfor example,\nthe LEDs increase in brightness when an "Add Face" event is received.'),(0,i.kt)("p",null,"To help denote an app-specific handler,\nApp-specific handlers will start with the ",(0,i.kt)("inlineCode",{parentName:"p"},"APP")," prefix.\nIf an app-specific handler for a device exists,\nit can be found in ",(0,i.kt)("inlineCode",{parentName:"p"},"source/event_handlers/{APP_NAME}_{DEV_TYPE}_{DEV_NAME}.c")))}v.isMDXComponent=!0}}]);