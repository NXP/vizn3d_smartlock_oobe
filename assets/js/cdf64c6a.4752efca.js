"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[30],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},_=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),_=c(n),m=l,d=_["".concat(s,".").concat(m)]||_[m]||u[m]||r;return n?a.createElement(d,i(i({ref:t},p),{},{components:n})):a.createElement(d,i({ref:t},p))}));function m(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=_;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:l,i[1]=o;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}_.displayName="MDXCreateElement"},9029:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return _}});var a=n(7462),l=n(3366),r=(n(7294),n(3905)),i=["components"],o={},s="Naming Conventions",c={unversionedId:"framework/naming-conventions",id:"framework/naming-conventions",isDocsHomePage:!1,title:"Naming Conventions",description:"The framework code adheres to a set of naming conventions",source:"@site/docs/framework/naming-conventions.md",sourceDirName:"framework",slug:"/framework/naming-conventions",permalink:"/vizn3d_smartlock_oobe/docs/framework/naming-conventions",editUrl:"https://github.com/nxp/vizn3d_smartlock_oobe/docs/docs/docs/framework/naming-conventions.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Event Handlers",permalink:"/vizn3d_smartlock_oobe/docs/framework/events/event-handlers"}},p=[{value:"Functions",id:"functions",children:[],level:2},{value:"Variables",id:"variables",children:[],level:2},{value:"Typedefs",id:"typedefs",children:[],level:2},{value:"Enums",id:"enums",children:[],level:2},{value:"Macros &amp; Defines",id:"macros--defines",children:[],level:2}],u={toc:p};function _(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"naming-conventions"},"Naming Conventions"),(0,r.kt)("p",null,"The framework code adheres to a set of naming conventions\nfor the purpose of making the code more easily readable and searchable using modern code completion tools."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"The naming conventions described below apply ",(0,r.kt)("em",{parentName:"p"},"only")," to framework-related code which is primarily located in the ",(0,r.kt)("inlineCode",{parentName:"p"},"HAL"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"framework"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"source")," folders."))),(0,r.kt)("h2",{id:"functions"},"Functions"),(0,r.kt)("p",null,"Functions names follow the format of ",(0,r.kt)("inlineCode",{parentName:"p"},"{APP/FWK/HAL}\\_{DevType}\\_{DevName}_{Action}"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ex.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="HAL/common/hal_input_push_buttons.c"',title:'"HAL/common/hal_input_push_buttons.c"'},"hal_input_status_t HAL_InputDev_PushButtons_Start(const input_dev_t *dev);\n")),(0,r.kt)("p",null,"To increase searchability using code completion tools\nfunctions for each framework component have their own prefix denoting which component they relate to."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"APP")," - app-specific function. Usually device registration or event handler-related."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FWK")," - framework-specific function. Usually framework API function."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"HAL")," - HAL-specific function. Usually HAL device operators.")),(0,r.kt)("p",null,"Additionally,\nan underscore ",(0,r.kt)("inlineCode",{parentName:"p"},"_")," may be placed in front of a function name to indicate that the function is ",(0,r.kt)("inlineCode",{parentName:"p"},"static"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"private"),"."),(0,r.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Static functions oftentimes exclude all but the underscore and the ",(0,r.kt)("inlineCode",{parentName:"p"},"Action")," as the component, devType, and devName are implicit."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ex.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="Static Function Example"',title:'"Static',Function:!0,'Example"':!0},"static shell_status_t _VersionCommand(shell_handle_t shellContextHandle, int32_t argc, char **argv);\nstatic shell_status_t _ResetCommand(shell_handle_t shellContextHandle, int32_t argc, char **argv);\nstatic shell_status_t _SaveCommand(shell_handle_t shellContextHandle, int32_t argc, char **argv);\nstatic shell_status_t _AddCommand(shell_handle_t shellContextHandle, int32_t argc, char **argv);\nstatic shell_status_t _DelCommand(shell_handle_t shellContextHandle, int32_t argc, char **argv);\n")),(0,r.kt)("p",null,"Following one of the above prefixes is the device type of the device defining the function."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"InputDev")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"OutputDev")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CameraDev")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DisplayDev")),(0,r.kt)("li",{parentName:"ul"},"etc.")),(0,r.kt)("p",null,"Following the device type is the name of the device.\nThis name should match the name of the device specified in the file name."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ex.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="HAL/common/hal_input_push_buttons.c"',title:'"HAL/common/hal_input_push_buttons.c"'},"hal_input_status_t HAL_InputDev_PushButtons_Start(const input_dev_t *dev);\n")),(0,r.kt)("p",null,'Finally, following the name of the device is the "action" which is being performed on/by the device. This could be anything including ',(0,r.kt)("inlineCode",{parentName:"p"},"Start"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Stop"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Register"),", etc."),(0,r.kt)("p",null,"Below are several examples of different function names."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="APP Function Example" {0}',title:'"APP',Function:!0,'Example"':!0,"{0}":!0},"void APP_InputDev_Shell_RegisterShellCommands(shell_handle_t shellContextHandle,\n                                              input_dev_t *shellDev,\n                                              input_dev_callback_t callback)\n{\n    s_InputCallback            = callback;\n    s_SourceShell              = shellDev;\n    s_ShellHandle              = shellContextHandle;\n    s_FrameworkRequest.respond = _FrameworkEventsHandler;\n    SHELL_RegisterCommand(shellContextHandle, SHELL_COMMAND(version));\n    SHELL_RegisterCommand(shellContextHandle, SHELL_COMMAND(reset));\n    SHELL_RegisterCommand(shellContextHandle, SHELL_COMMAND(save));\n    SHELL_RegisterCommand(shellContextHandle, SHELL_COMMAND(add));\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="FWK Function Example" {5}',title:'"FWK',Function:!0,'Example"':!0,"{5}":!0},'int HAL_InputDev_PushButtons_Register()\n{\n    int error = 0;\n    LOGD("input_dev_push_buttons_register");\n    error = FWK_InputManager_DeviceRegister(&s_InputDev_PushButtons);\n    return error;\n}\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="HAL Function Example"',title:'"HAL',Function:!0,'Example"':!0},"hal_input_status_t HAL_InputDev_PushButtons_Init(input_dev_t *dev, input_dev_callback_t callback);\nhal_input_status_t HAL_InputDev_PushButtons_Deinit(const input_dev_t *dev);\nhal_input_status_t HAL_InputDev_PushButtons_Start(const input_dev_t *dev);\nhal_input_status_t HAL_InputDev_PushButtons_Stop(const input_dev_t *dev);\nhal_input_status_t HAL_InputDev_PushButtons_InputNotify(const input_dev_t *dev, void *param);\n")),(0,r.kt)("h2",{id:"variables"},"Variables"),(0,r.kt)("p",null,"Local and global variables both use ",(0,r.kt)("inlineCode",{parentName:"p"},"camelCase"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="Local Variable Example" {5,6}',title:'"Local',Variable:!0,'Example"':!0,"{5,6}":!0},"static hal_output_status_t HAL_OutputDev_RgbLed_InferComplete(const output_dev_t *dev,\n                                                              output_algo_source_t source,\n                                                              void *inferResult)\n{\n    vision_algo_result_t *visionAlgoResult = (vision_algo_result_t *)inferResult;\n    hal_output_status_t error              = kStatus_HAL_OutputSuccess;\n")),(0,r.kt)("p",null,"Static variables are prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"s_PascalCase")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ex.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="Static Variable Example"',title:'"Static',Variable:!0,'Example"':!0},"static event_common_t s_CommonEvent;\nstatic event_face_rec_t s_FaceRecEvent;\nstatic event_recording_t s_RecordingEvent;\nstatic input_event_t s_InputEvent;\nstatic framework_request_t s_FrameworkRequest;\nstatic input_dev_callback_t s_InputCallback;\nstatic input_dev_t *s_SourceShell; /* Shell device that commands are sent over */\nstatic shell_handle_t s_ShellHandle;\n")),(0,r.kt)("h2",{id:"typedefs"},"Typedefs"),(0,r.kt)("p",null,"Type definitions are written in ",(0,r.kt)("inlineCode",{parentName:"p"},"snake_case")," and end in ",(0,r.kt)("inlineCode",{parentName:"p"},"_t"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ex.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="Typedef Example"',title:'"Typedef','Example"':!0},"typedef struct\n{\n    fwk_task_t task;\n    input_task_data_t inputData;\n} input_task_t;\n")),(0,r.kt)("h2",{id:"enums"},"Enums"),(0,r.kt)("p",null,"Enumerations are written in the the form ",(0,r.kt)("inlineCode",{parentName:"p"},"kEventType_State"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ex.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="Enumeration Example"',title:'"Enumeration','Example"':!0},"typedef enum _rgb_led_color\n{\n    kRGBLedColor_Red,    /*!< LED Red Color */\n    kRGBLedColor_Orange, /*!< LED Orange Color */\n    kRGBLedColor_Yellow, /*!< LED Yellow Color */\n    kRGBLedColor_Green,  /*!< LED Green Color */\n    kRGBLedColor_Blue,   /*!< LED Blue Color */\n    kRGBLedColor_Purple, /*!< LED Purple Color */\n    kRGBLedColor_Cyan,   /*!< LED Cyan Color */\n    kRGBLedColor_White,  /*!< LED White Color */\n    kRGBLedColor_Off,    /*!< LED Off */\n} rgbLedColor_t;\n")),(0,r.kt)("p",null,"Enumerations for a status specifically are be written in the form ",(0,r.kt)("inlineCode",{parentName:"p"},"kStatus_{Component}_{State}"),"."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ex.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:'Enumeration title="Status Example"',Enumeration:!0,title:'"Status','Example"':!0},"/*! @brief Error codes for input hal devices */\ntypedef enum _hal_input_status\n{\n    kStatus_HAL_InputSuccess = 0,                                                      /*!< Successfully */\n    kStatus_HAL_InputError   = MAKE_FRAMEWORK_STATUS(kStatusFrameworkGroups_Input, 1), /*!< Error occurs */\n} hal_input_status_t;\n")),(0,r.kt)("h2",{id:"macros--defines"},"Macros & Defines"),(0,r.kt)("p",null,"Defines are written in all caps."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Ex.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="HAL/common/hal_input_push_buttons.c"',title:'"HAL/common/hal_input_push_buttons.c"'},"#define INPUT_DEV_PB_WAKE_GPIO        BOARD_USER_BUTTON_GPIO\n#define INPUT_DEV_PB_WAKE_GPIO_PIN    BOARD_USER_BUTTON_GPIO_PIN\n#define INPUT_DEV_SW1_GPIO            BOARD_BUTTON_SW1_GPIO\n#define INPUT_DEV_SW1_GPIO_PIN        BOARD_BUTTON_SW1_PIN\n#define INPUT_DEV_SW2_GPIO            BOARD_BUTTON_SW2_GPIO\n#define INPUT_DEV_SW2_GPIO_PIN        BOARD_BUTTON_SW2_PIN\n#define INPUT_DEV_SW3_GPIO            BOARD_BUTTON_SW3_GPIO\n#define INPUT_DEV_SW3_GPIO_PIN        BOARD_BUTTON_SW3_PIN\n#define INPUT_DEV_PUSH_BUTTONS_IRQ    GPIO13_Combined_0_31_IRQn\n#define INPUT_DEV_PUSH_BUTTON_SW1_IRQ BOARD_BUTTON_SW1_IRQ\n#define INPUT_DEV_PUSH_BUTTON_SW2_IRQ BOARD_BUTTON_SW2_IRQ\n#define INPUT_DEV_PUSH_BUTTON_SW3_IRQ BOARD_BUTTON_SW3_IRQ\n")))}_.isMDXComponent=!0}}]);