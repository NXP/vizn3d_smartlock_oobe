"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[117],{3905:function(e,n,r){r.d(n,{Zo:function(){return p},kt:function(){return d}});var a=r(7294);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,a,t=function(e,n){if(null==e)return{};var r,a,t={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var s=a.createContext({}),m=function(e){var n=a.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):o(o({},n),e)),r},p=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},c=a.forwardRef((function(e,n){var r=e.components,t=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(r),d=t,g=c["".concat(s,".").concat(d)]||c[d]||u[d]||i;return r?a.createElement(g,o(o({ref:n},p),{},{components:r})):a.createElement(g,o({ref:n},p))}));function d(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var i=r.length,o=new Array(i);o[0]=c;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:t,o[1]=l;for(var m=2;m<i;m++)o[m]=r[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}c.displayName="MDXCreateElement"},5444:function(e,n,r){r.r(n),r.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return m},toc:function(){return p},default:function(){return c}});var a=r(7462),t=r(3366),i=(r(7294),r(3905)),o=["components"],l={sidebar_position:8},s="Low Power Manager",m={unversionedId:"framework/device_managers/lpm_manager",id:"framework/device_managers/lpm_manager",isDocsHomePage:!1,title:"Low Power Manager",description:"The Low Power Device Manager is unique amongst the managers",source:"@site/docs/framework/device_managers/lpm_manager.md",sourceDirName:"framework/device_managers",slug:"/framework/device_managers/lpm_manager",permalink:"/vizn3d_smartlock_oobe/docs/framework/device_managers/lpm_manager",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Voice Algorithm Manager",permalink:"/vizn3d_smartlock_oobe/docs/framework/device_managers/voice_algo_manager"},next:{title:"Audio Processing Manager",permalink:"/vizn3d_smartlock_oobe/docs/framework/device_managers/audio_processing"}},p=[{value:"APIs",id:"apis",children:[{value:"FWK_LpmManager_DeviceRegister",id:"fwk_lpmmanager_deviceregister",children:[],level:3},{value:"FWK_LpmManager_RegisterRequestHandler",id:"fwk_lpmmanager_registerrequesthandler",children:[],level:3},{value:"FWK_LpmManager_UnregisterRequestHandler",id:"fwk_lpmmanager_unregisterrequesthandler",children:[],level:3},{value:"FWK_LpmManager_RuntimeGet",id:"fwk_lpmmanager_runtimeget",children:[],level:3},{value:"FWK_LpmManager_RuntimePut",id:"fwk_lpmmanager_runtimeput",children:[],level:3},{value:"FWK_LpmManager_RuntimeSet",id:"fwk_lpmmanager_runtimeset",children:[],level:3},{value:"FWK_LpmManager_RequestStatus",id:"fwk_lpmmanager_requeststatus",children:[],level:3},{value:"FWK_LpmManager_SetSleepMode",id:"fwk_lpmmanager_setsleepmode",children:[],level:3},{value:"FWK_LpmManager_EnableSleepMode",id:"fwk_lpmmanager_enablesleepmode",children:[],level:3}],level:2}],u={toc:p};function c(e){var n=e.components,r=(0,t.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"low-power-manager"},"Low Power Manager"),(0,i.kt)("p",null,"The Low Power Device Manager is unique amongst the managers\nbecause it does not have the typical ",(0,i.kt)("inlineCode",{parentName:"p"},"Init")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"Start")," functions that the other managers do.\nInstead,\nthe Low Power Manager has APIs to register a device (only one at a time), configure how deep a sleep the board should enter, enable sleep mode, and more."),(0,i.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},'Due to the unique nature of the low power devices being an abstract "virtual" device,\nonly one LPM device can be registered to the LPM manager at a time.\nHowever,\nthere should be no need for more than one LPM device because other devices can configure the current low power mode states by using the Low Power Manager APIs.'))),(0,i.kt)("h2",{id:"apis"},"APIs"),(0,i.kt)("h3",{id:"fwk_lpmmanager_deviceregister"},"FWK_LpmManager_DeviceRegister"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"/**\n * @brief Register a low power mode device. Currently, only one low power mode device can be registered at a time.\n * @param dev Pointer to a low power mode device structure\n * @return int Return 0 if registration was successful\n */\nint FWK_LpmManager_DeviceRegister(lpm_dev_t *dev);\n")),(0,i.kt)("h3",{id:"fwk_lpmmanager_registerrequesthandler"},"FWK_LpmManager_RegisterRequestHandler"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"int FWK_LpmManager_RegisterRequestHandler(hal_lpm_request_t *req);\n")),(0,i.kt)("h3",{id:"fwk_lpmmanager_unregisterrequesthandler"},"FWK_LpmManager_UnregisterRequestHandler"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"int FWK_LpmManager_UnregisterRequestHandler(hal_lpm_request_t *req);\n")),(0,i.kt)("h3",{id:"fwk_lpmmanager_runtimeget"},"FWK_LpmManager_RuntimeGet"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"int FWK_LpmManager_RuntimeGet(hal_lpm_request_t *req);\n")),(0,i.kt)("h3",{id:"fwk_lpmmanager_runtimeput"},"FWK_LpmManager_RuntimePut"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"int FWK_LpmManager_RuntimePut(hal_lpm_request_t *req);\n")),(0,i.kt)("h3",{id:"fwk_lpmmanager_runtimeset"},"FWK_LpmManager_RuntimeSet"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"int FWK_LpmManager_RuntimeSet(hal_lpm_request_t *req, int8_t count);\n")),(0,i.kt)("h3",{id:"fwk_lpmmanager_requeststatus"},"FWK_LpmManager_RequestStatus"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"int FWK_LpmManager_RequestStatus(unsigned int *totalUsageCount);\n")),(0,i.kt)("h3",{id:"fwk_lpmmanager_setsleepmode"},"FWK_LpmManager_SetSleepMode"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},'/**\n * @brief Configure the sleep mode to use when entering sleep\n * @param sleepMode sleep mode to use when entering sleep. Examples include SNVS and other "lighter" sleep modes\n * @return int Return 0 if successful\n */\nint FWK_LpmManager_SetSleepMode(hal_lpm_mode_t sleepMode);\n')),(0,i.kt)("h3",{id:"fwk_lpmmanager_enablesleepmode"},"FWK_LpmManager_EnableSleepMode"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c"},"/**\n * @brief Configure sleep mode on/off status\n * @param enable used to set sleep mode on/off; true is enable, false is disable\n * @return int Return 0 if successful\n */\nint FWK_LpmManager_EnableSleepMode(hal_lpm_manager_status_t enable);\n")))}c.isMDXComponent=!0}}]);